package dashboard

import (
	"github.com/viddrobnic/sparovec/models"
	"github.com/viddrobnic/sparovec/features/layout"
	"strconv"
	"time"
	"fmt"
)

type dashboardViewData struct {
	navbar  models.Navbar
	month   time.Month
	year    int
	maxYear int
	data    models.DashboardData
}

func dashboardUrl(selectedWalletId, year int, month time.Month) templ.SafeURL {
	url := fmt.Sprintf("/wallets/%d?year=%d&month=%d", selectedWalletId, year, month)
	return templ.SafeURL(url)
}

templ dashboardView(data dashboardViewData) {
	@layout.Layout(data.navbar) {
		<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
		<div class="flex flex-wrap gap-5 justify-between items-center">
			<h1 class="text-5xl font-semibold">Dashboard</h1>
			<div class="flex flex-row gap-2">
				<select
					class="select select-bordered w-fit"
					id="year_select"
					onchange={ onChangeDate(data.navbar.SelectedWalletId) }
				>
					for year := data.maxYear; year >= 2020; year-- {
						<option
							value={ strconv.Itoa(year) }
							selected?={ year == data.year }
						>{ strconv.Itoa(year) }</option>
					}
				</select>
				<select
					class="select select-bordered w-fit"
					id="month_select"
					onchange={ onChangeDate(data.navbar.SelectedWalletId) }
				>
					for month := 1; month<= 12; month++ {
						<option
							value={ strconv.Itoa(month) }
							selected?={ month == int(data.month) }
						>{ time.Month(month).String() }</option>
					}
				</select>
			</div>
		</div>
		@stats(data.data)
		<h2 class="mt-8 pl-2 text-3xl font-semibolr">Expenses by Category</h2>
		<div class="grid gap-4 md:grid-cols-2 lg:grid-cols-7 mt-4">
			<div class="card shadow-lg bg-base-100 lg:col-span-4">
				<div class="card-body h-[450px]" id="piechart">
					if len(data.data.TagBalance) == 0 {
						<div class="flex flex-row items-center justify-center w-full h-full text-lg gap-2">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-6 w-6"><line x1="9" x2="15" y1="15" y2="9"></line><circle cx="12" cy="12" r="10"></circle></svg>
							No Data
						</div>
					}
				</div>
			</div>
			<div class="card shadow-lg bg-base-100 lg:col-span-3">
				<div class="card-body md:max-h-[450px] md:overflow-auto scroll-m-1">
					if len(data.data.TagBalance) > 0 {
						for idx, tagBalance := range data.data.TagBalance {
							if idx > 0 {
								<div class="divider"></div>
							}
							@tagCard(tagBalance.Tag.Name, tagBalance.Balance)
						}
					} else {
						<div class="flex flex-row items-center justify-center w-full h-full text-lg gap-2">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-6 w-6"><line x1="9" x2="15" y1="15" y2="9"></line><circle cx="12" cy="12" r="10"></circle></svg>
							No Data
						</div>
					}
				</div>
			</div>
		</div>
		if len(data.data.TagBalance) > 0 {
			@drawChart(data.data.TagBalance)
		}
	}
}

script onChangeDate(selectedWalletId int ) {
	const year = year_select.value;
	const month = month_select.value;
	const url = `/wallets/${selectedWalletId}?year=${year}&month=${month}`;
	window.location.assign(url);
}

script drawChart(data []models.TagBalance) {
	google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(renderChart);

	function renderChart() {
		piechart.innerHTML = "";

		const chartData = google.visualization.arrayToDataTable([
				['Tags', 'Balance'],
				...data.map((item) => [item.Tag.Name, -item.Balance/100]),
		]);

		const chart = new google.visualization.PieChart(document.getElementById('piechart'));
		chart.draw(chartData, {
			title: 'Tags',
			backgroundColor: '#faf7f5', // bg-base-100
			chartArea: {
				left: 10,
				top: 10,
				right: 10,
				bottom: 10,
			},
			pieSliceText: 'label',
			legend: 'none',
			colors: [
				'#ef4444',
				'#f97316',
				'#22c55e',
				'#06b6d4',
				'#3b82f6',
				'#a855f7',
				'#d946ef',
				'#ec4899',
				'#f43f5e',
			],
		});
	}

	window.addEventListener("resize", renderChart);
}

templ stats(data models.DashboardData) {
	<div class="pt-6">
		<div class="grid gap-4 xs:grid-cols-2 lg:grid-cols-4">
			@statsCard("Money In", data.Income, true)
			@statsCard("Expenses", data.Outcome, true)
			@statsCard("Balance", data.Balance, true)
			@statsCard("Nr. of Transactions", data.NrTransactions, false)
		</div>
	</div>
}

templ statsCard(title string, value int, isCurrency bool) {
	<div class="stats shadow-lg">
		<div class="stat">
			<div class="stat-title">{ title }</div>
			<div class="stat-value text-3xl">
				if isCurrency {
					{ models.FormatCurrency(value) }
				} else {
					{ strconv.Itoa( value ) }
				}
			</div>
		</div>
	</div>
}

templ tagCard(name string, balance int) {
	<div class="flex justify-between items-center">
		<div>{ name }</div>
		<div class="font-medium">
			{ models.FormatCurrency(balance) }
		</div>
	</div>
}
